/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./dist/js/app.js":
/*!************************!*\
  !*** ./dist/js/app.js ***!
  \************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n  // GSAP\r\n\r\ngsap.registerPlugin(ScrollTrigger, ScrollSmoother);\r\n\r\nScrollTrigger.matchMedia({\r\n  // Только для экранов >= 1025px\r\n  \"(min-width: 1025px)\": function () {\r\n    let smoother = ScrollSmoother.create({\r\n      smooth: 2,\r\n      effects: true,\r\n      normalizeScroll: true\r\n    });\r\n\r\n    ScrollTrigger.create({\r\n      trigger: \".hero__link\",\r\n      pin: true,\r\n      start: \"top top\",\r\n      end: \"bottom bottom\",\r\n      markers: false\r\n    });\r\n  }\r\n});\r\n\r\nwindow.addEventListener(\"load\", function () {\r\n  // preloader\r\n  const preloader = document.querySelector('#preloader');\r\n\r\n  setTimeout(() => {\r\n    document.getElementById(\"preloader\")?.classList.add(\"is-ready\");\r\n  }, 3000);\r\n\r\n  // Формы\r\n  document.querySelectorAll(\".page-type__form.form\").forEach(initStepperForm);\r\n\r\n  function initStepperForm(form) {\r\n    // ——— utils\r\n    const $ = (sel, root = form) => root.querySelector(sel);\r\n    const $all = (sel, root = form) => Array.from(root.querySelectorAll(sel));\r\n    const onlyDigits = (v) => String(v || \"\").replace(/[^\\d]/g, \"\");\r\n    const fmt = (digits) => String(digits).replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \");\r\n    const num = (v) => {\r\n      if (typeof v === \"number\") return v;\r\n      const d = onlyDigits(v);\r\n      return d ? parseInt(d, 10) : 0;\r\n    };\r\n    const labelTextForInput = (input) => {\r\n      if (!input?.id) return \"\";\r\n      const lbl = form.querySelector(`label[for=\"${CSS.escape(input.id)}\"]`);\r\n      return lbl ? lbl.textContent.trim() : \"\";\r\n    };\r\n\r\n    // ——— DOM\r\n    const steps = $all(\".form__step\");\r\n    if (!steps.length) return;\r\n\r\n    const btnBack   = $(\".form__buttons .form__button.back\");\r\n    const btnPrev   = $(\".form__buttons .form__prev\");\r\n    const btnNext   = $(\".form__buttons .form__next\");\r\n    const btnFinish = $(\".form__buttons .form__submit\");\r\n    const finalNote = $(\".form__bottom > span\");\r\n    const priceNodes = $all(\".form__price span\");\r\n\r\n    const container  = form.closest(\".certificate__container\") || document;\r\n    const previewImg = container.querySelector(\".certificate__img img\");\r\n\r\n    const servicesPriceNode = $('#tab-2 .services-price span');\r\n\r\n    // ——— state\r\n    let current = 0;\r\n    let updateScheduled = false;\r\n\r\n    function renderServicePrice() {\r\n      if (!servicesPriceNode) return;\r\n      const onTab2 = activeTabId === '#tab-2';\r\n      if (!onTab2) {\r\n        servicesPriceNode.textContent = '';\r\n        return;\r\n      }\r\n      const checked = $('#tab-2 input[name=\"services\"]:checked');\r\n      if (!checked) {\r\n        servicesPriceNode.textContent = '';\r\n        return;\r\n      }\r\n      const v = onlyDigits(checked.value);\r\n      servicesPriceNode.textContent = v ? `${fmt(v)} тг` : '';\r\n    }\r\n\r\n    const scheduleUpdate = () => {\r\n      if (updateScheduled) return;\r\n      updateScheduled = true;\r\n      queueMicrotask(() => {\r\n        updateScheduled = false;\r\n        renderTotal();\r\n        renderServicePrice();\r\n        updateButtonsState();\r\n      });\r\n    };\r\n\r\n    // ——— tabs\r\n    const tabsList    = $('[data-tabs]');\r\n    const tabLinks    = tabsList ? Array.from(tabsList.querySelectorAll('a[href^=\"#tab-\"]')) : [];\r\n    const tabPanels   = ['#tab-1', '#tab-2'].map((id) => $(id));\r\n    const servicesBox = $('.form__services');\r\n\r\n    function setControlsEnabled(root, enabled) {\r\n      if (!root) return;\r\n      root.querySelectorAll('input, select, textarea, button').forEach((el) => {\r\n        el.disabled = !enabled;\r\n        if (!enabled) {\r\n          if (el.type === 'radio') el.checked = false;\r\n          if (el.classList?.contains('input-text')) el.value = '';\r\n        }\r\n      });\r\n    }\r\n\r\n    function ensureFirstRadioChecked(root) {\r\n      if (!root) return;\r\n      const first = root.querySelector('input[type=\"radio\"]');\r\n      if (first && !root.querySelector('input[type=\"radio\"]:checked')) {\r\n        first.checked = true;\r\n      }\r\n    }\r\n\r\n    let activeTabId = (tabLinks.find(a => a.hasAttribute('data-tabby-default'))?.getAttribute('href') || '#tab-1');\r\n\r\n    // ——— показать/скрыть блок услуг\r\n    function updateServicesVisibility() {\r\n      if (!servicesBox) return;\r\n      const hide = activeTabId === '#tab-2';\r\n      servicesBox.style.display = hide ? 'none' : '';\r\n      servicesBox.toggleAttribute('inert', hide);\r\n    }\r\n\r\n    function applyTabVisibility() {\r\n      tabPanels.forEach((panel) => {\r\n        if (!panel) return;\r\n        const isActive = `#${panel.id}` === activeTabId;\r\n        panel.hidden = !isActive;\r\n        panel.toggleAttribute('inert', !isActive);\r\n        setControlsEnabled(panel, isActive);\r\n        if (isActive) ensureFirstRadioChecked(panel);\r\n      });\r\n      updateServicesVisibility();\r\n      renderTotal();\r\n      renderServicePrice();\r\n      updateButtonsState();\r\n    }\r\n\r\n    if (tabsList && tabPanels.every(Boolean)) {\r\n      applyTabVisibility();\r\n      tabLinks.forEach((a) => {\r\n        a.addEventListener('click', (e) => {\r\n          e.preventDefault();\r\n          const href = a.getAttribute('href');\r\n          if (!href || href === activeTabId) return;\r\n          activeTabId = href;\r\n          tabLinks.forEach(l => l.classList.toggle('is-active', l === a));\r\n          applyTabVisibility();\r\n        });\r\n      });\r\n    }\r\n\r\n    // ——— validation\r\n    function radiosInScopeByName(scopeEl) {\r\n      const map = new Map();\r\n      scopeEl.querySelectorAll('input[type=\"radio\"]').forEach((r) => {\r\n        if (r.disabled) return;\r\n        if (!map.has(r.name)) map.set(r.name, []);\r\n        map.get(r.name).push(r);\r\n      });\r\n      return map;\r\n    }\r\n\r\n    function isStepValid(stepEl) {\r\n      let valid = true;\r\n      const isFirstStep = stepEl === steps[0];\r\n      const scope = (isFirstStep && tabsList && activeTabId) ? $(activeTabId) || stepEl : stepEl;\r\n\r\n      const groups = radiosInScopeByName(scope);\r\n      groups.forEach((radios) => {\r\n        const isRequired = radios.some((r) => r.required);\r\n        if (!isRequired) return;\r\n        const fields = radios[0].closest(\".form__fields\");\r\n        const manual = fields ? fields.querySelector(\".input-text\") : null;\r\n        const ok = radios.some((r) => r.checked) || (manual && manual.value.trim() !== \"\");\r\n        if (!ok) valid = false;\r\n      });\r\n\r\n      scope.querySelectorAll(\"input, select, textarea\").forEach((ctrl) => {\r\n        if (ctrl.disabled || ctrl.type === \"radio\" || !ctrl.required) return;\r\n        if (ctrl.type === \"email\") {\r\n          if (!ctrl.value.trim()) valid = false;\r\n        } else if (!ctrl.checkValidity()) {\r\n          valid = false;\r\n        }\r\n      });\r\n\r\n      return valid;\r\n    }\r\n\r\n    // ——— расчёт\r\n    function cert_getStep1Value() {\r\n      if (activeTabId === '#tab-1') {\r\n        const panel = $('#tab-1');\r\n        if (!panel) return 0;\r\n        const manual = panel.querySelector('.input-text');\r\n        const checked = panel.querySelector('input[name=\"price\"]:checked');\r\n        if (manual && manual.value.trim()) return num(manual.value);\r\n        if (checked) return num(checked.value);\r\n        return 0;\r\n      }\r\n      if (activeTabId === '#tab-2') {\r\n        const panel = $('#tab-2');\r\n        if (!panel) return 0;\r\n        const checked = panel.querySelector('input[name=\"services\"]:checked');\r\n        if (checked) return num(checked.value);\r\n        return 0;\r\n      }\r\n      return 0;\r\n    }\r\n\r\n    function cert_getAmountValue() {\r\n      const anyAmtRadio = form.querySelector('input[type=\"radio\"][name=\"amount\"]');\r\n      if (!anyAmtRadio) return 1;\r\n      const fields = anyAmtRadio.closest(\".form__fields\");\r\n      const manual = fields ? fields.querySelector(\".input-text\") : null;\r\n      const checked = form.querySelector('input[name=\"amount\"]:checked');\r\n\r\n      if (manual && manual.value.trim()) {\r\n        const n = Math.max(1, num(manual.value));\r\n        return n || 1;\r\n      }\r\n      if (checked) {\r\n        const labelNum = num(labelTextForInput(checked));\r\n        return labelNum || 1;\r\n      }\r\n      return 1;\r\n    }\r\n\r\n    function subs_getPackPrice() {\r\n      const typeChecked = form.querySelector('input[name=\"type\"]:checked:not([data-img])');\r\n      const amountChecked = form.querySelector('input[name=\"amount\"]:checked[data-prices]');\r\n      if (!typeChecked || !amountChecked) return 0;\r\n      let map = {};\r\n      try {\r\n        map = JSON.parse(amountChecked.dataset.prices || \"{}\");\r\n      } catch (e) { map = {}; }\r\n      const price = map[typeChecked.id];\r\n      return typeof price === \"number\" ? price : num(price);\r\n    }\r\n\r\n    function computeTotal() {\r\n      if (form.classList.contains(\"subscription__form\")) {\r\n        return subs_getPackPrice() || 0;\r\n      }\r\n      const priceOrService = cert_getStep1Value();\r\n      const qty = cert_getAmountValue();\r\n      return priceOrService * qty;\r\n    }\r\n\r\n    function renderTotal() {\r\n      const sum = computeTotal();\r\n      if (!priceNodes.length) return;\r\n      const text = sum.toLocaleString(\"ru-RU\");\r\n      priceNodes.forEach((n) => (n.textContent = text));\r\n    }\r\n\r\n    // ——— шаги и кнопки\r\n    function setStepEnabled(stepEl, enabled) {\r\n      stepEl.hidden = !enabled;\r\n      stepEl.toggleAttribute(\"inert\", !enabled);\r\n      stepEl.querySelectorAll(\"input, select, textarea, button\").forEach((el) => (el.disabled = !enabled));\r\n    }\r\n\r\n    function updateButtonsState() {\r\n      const isLast = current === steps.length - 1;\r\n      const valid  = isStepValid(steps[current]);\r\n      if (btnNext)   btnNext.disabled   = !isLast && !valid;\r\n      if (btnFinish) btnFinish.disabled =  isLast && !valid;\r\n    }\r\n\r\n    function showStep(i) {\r\n      steps.forEach((el, idx) => setStepEnabled(el, idx === i));\r\n      const isFirst = i === 0;\r\n      const isLast  = i === steps.length - 1;\r\n      if (btnBack)   btnBack.style.display   = isFirst ? \"inline-block\" : \"none\";\r\n      if (btnPrev)  { btnPrev.style.display  = isFirst ? \"none\" : \"inline-block\"; btnPrev.disabled = isFirst; }\r\n      if (btnNext)   btnNext.style.display   = isLast  ? \"none\"  : \"inline-block\";\r\n      if (btnFinish) btnFinish.style.display = isLast  ? \"inline-block\" : \"none\";\r\n      if (finalNote) finalNote.style.display = isLast  ? \"block\" : \"none\";\r\n      renderTotal();\r\n      updateButtonsState();\r\n    }\r\n\r\n    btnPrev?.addEventListener(\"click\", (e) => {\r\n      e.preventDefault();\r\n      if (current > 0) { current--; showStep(current); }\r\n    });\r\n    btnNext?.addEventListener(\"click\", (e) => {\r\n      e.preventDefault();\r\n      if (!isStepValid(steps[current])) return;\r\n      if (current < steps.length - 1) { current++; showStep(current); }\r\n    });\r\n    btnFinish?.addEventListener(\"click\", (e) => {\r\n      e.preventDefault();\r\n      if (!isStepValid(steps[current])) return;\r\n      form.submit();\r\n    });\r\n\r\n    // ——— синхронизация manual ↔ radio\r\n    if (form.classList.contains(\"certificate__form\")) {\r\n      $all(\".form__fields\").forEach((fields) => {\r\n        const manual = fields.querySelector(\".input-text\");\r\n        const radios = fields.querySelectorAll('input[type=\"radio\"][name]');\r\n        if (!manual || !radios.length) return;\r\n\r\n        manual.addEventListener(\"input\", () => {\r\n          const d = onlyDigits(manual.value);\r\n          manual.value = d ? fmt(d) : \"\";\r\n          radios.forEach((r) => (r.checked = false));\r\n          const isAmountGroup = radios[0]?.name === \"amount\";\r\n          if (isAmountGroup) {\r\n            const n = parseInt(d || \"0\", 10);\r\n            if (d !== \"\" && n === 0) manual.value = \"\";\r\n          }\r\n          scheduleUpdate();\r\n        });\r\n\r\n        manual.addEventListener(\"blur\", () => {\r\n          const d = onlyDigits(manual.value);\r\n          manual.value = d ? fmt(String(parseInt(d, 10))) : \"\";\r\n          scheduleUpdate();\r\n        });\r\n\r\n        radios.forEach((r) => {\r\n          r.addEventListener(\"change\", () => {\r\n            if (r.checked && manual.value) manual.value = \"\";\r\n            scheduleUpdate();\r\n          });\r\n        });\r\n      });\r\n    }\r\n\r\n    // ——— превью дизайна\r\n    if (form.classList.contains(\"certificate__form\")) {\r\n      const gallery = container.querySelector(\".certificate__img\");\r\n      const designInputs = form.querySelectorAll('input[name=\"type\"][data-img]');\r\n\r\n      function setActiveByData(key) {\r\n        if (!gallery || !key) return;\r\n        const imgs = Array.from(gallery.querySelectorAll(\"img[data-img]\"));\r\n        imgs.forEach((img) => {\r\n          const isMatch = img.dataset.img === key;\r\n          img.classList.toggle(\"active\", isMatch);\r\n          img.toggleAttribute(\"aria-hidden\", !isMatch);\r\n        });\r\n      }\r\n\r\n      designInputs.forEach((input) => {\r\n        input.addEventListener(\"change\", () => {\r\n          if (input.checked && input.dataset.img) {\r\n            setActiveByData(input.dataset.img);\r\n          }\r\n        });\r\n      });\r\n\r\n      const chosen = form.querySelector('input[name=\"type\"][data-img]:checked');\r\n      if (chosen?.dataset?.img) setActiveByData(chosen.dataset.img);\r\n    }\r\n\r\n    // поздравление\r\n    const nameInput = $('input[name=\"nameTo\"]');\r\n    const congratInput = $('input[name=\"congratulations\"]');\r\n    const congratCheck = $('input[name=\"check-congrat\"]');\r\n\r\n    function updateCongratVisibility() {\r\n      if (!congratInput || !congratCheck) return;\r\n      const on = congratCheck.checked;\r\n      congratInput.hidden   = !on;\r\n      congratInput.disabled = !on;\r\n      congratInput.required = on;\r\n      nameInput.hidden   = !on;\r\n      nameInput.disabled = !on;\r\n      nameInput.required = on;\r\n      if (!on) congratInput.value = '';\r\n      if (!on) nameInput.value = '';\r\n      updateButtonsState();\r\n    }\r\n\r\n    congratCheck?.addEventListener('change', updateCongratVisibility);\r\n    updateCongratVisibility();\r\n\r\n    // ——— общие слушатели\r\n    form.addEventListener(\"input\",  scheduleUpdate);\r\n    form.addEventListener(\"change\", scheduleUpdate);\r\n    form.addEventListener(\"keydown\", (e) => {\r\n      if (e.key === \"Enter\") {\r\n        const isLast = current === steps.length - 1;\r\n        const valid  = isStepValid(steps[current]);\r\n        if (!isLast || !valid) e.preventDefault();\r\n      }\r\n    });\r\n\r\n    // ——— старт\r\n    showStep(current);\r\n    if (tabsList && activeTabId) ensureFirstRadioChecked($(activeTabId));\r\n    renderTotal();\r\n    updateButtonsState();\r\n  }\r\n\r\n  // Модалка\r\n\r\n  function hidePopup(popup) {\r\n    const modalsParent = popup.parentElement;\r\n    modalsParent.addEventListener(\"click\", function (e) {\r\n      const target = e.target;\r\n      if (\r\n        target.classList.contains(\"modal__close\") ||\r\n        target.classList.contains(\"modals\")\r\n      ) {\r\n        popup.style.transition = \"opacity 0.4s\";\r\n        popup.style.opacity = \"0\";\r\n        setTimeout(() => {\r\n          popup.style.display = \"none\";\r\n          if (modalsParent) {\r\n            modalsParent.style.opacity = \"0\";\r\n            modalsParent.style.display = \"none\";\r\n          }\r\n          document.body.classList.remove(\"modal-open\");\r\n        }, 400);\r\n      }\r\n    });\r\n  }\r\n  function showPopup(popup) {\r\n    const modalsParent = popup.parentElement;\r\n    if (modalsParent) {\r\n      modalsParent.style.display = \"flex\";\r\n      modalsParent.style.transition = \"opacity 0.4s\";\r\n      modalsParent.style.opacity = \"1\"; \r\n    }\r\n\r\n    popup.style.display = \"block\";\r\n    setTimeout(() => {\r\n      popup.style.transition = \"opacity 0.4s\";\r\n      popup.style.opacity = \"1\";\r\n    }, 10);\r\n\r\n    document.body.classList.add(\"modal-open\");\r\n  }\r\n\r\n  let modalBtns = document.querySelectorAll(\".modal-btn\");\r\n  let modals = document.querySelectorAll(\".modal\");\r\n\r\n  modals.forEach((modal) => {\r\n    modal.style.display = \"none\";\r\n    hidePopup(modal);\r\n  });\r\n\r\n  modalBtns.forEach((btn) => {\r\n    btn.addEventListener(\"click\", () => {\r\n      let modalType = btn.dataset.modal;\r\n      let modalToShow = document.querySelector(\r\n        `.modal[data-modal=\"${modalType}\"]`\r\n      );\r\n\r\n      if (modalToShow) {\r\n        showPopup(modalToShow);\r\n      }\r\n    });\r\n  });\r\n\r\n  // Маска для телефона\r\n\r\n  [].forEach.call( document.querySelectorAll('input[type=\"tel\"]'), function(input) {\r\n    var keyCode;\r\n    function mask(event) {\r\n        event.keyCode && (keyCode = event.keyCode);\r\n        var pos = this.selectionStart;\r\n        if (pos < 3) event.preventDefault();\r\n        var matrix = \"+7 (___) ___ ____\",\r\n            i = 0,\r\n            def = matrix.replace(/\\D/g, \"\"),\r\n            val = this.value.replace(/\\D/g, \"\"),\r\n            new_value = matrix.replace(/[_\\d]/g, function(a) {\r\n                return i < val.length ? val.charAt(i++) || def.charAt(i) : a\r\n            });\r\n        i = new_value.indexOf(\"_\");\r\n        if (i != -1) {\r\n            i < 5 && (i = 3);\r\n            new_value = new_value.slice(0, i)\r\n        }\r\n        var reg = matrix.substring(0, this.value.length).replace(/_+/g,\r\n            function(a) {\r\n                return \"\\\\d{1,\" + a.length + \"}\"\r\n            }).replace(/[+()]/g, \"\\\\$&\");\r\n        reg = new RegExp(\"^\" + reg + \"$\");\r\n        if (!reg.test(this.value) || this.value.length < 5 || keyCode > 47 && keyCode < 58) this.value = new_value;\r\n        if (event.type == \"blur\" && this.value.length < 5)  this.value = \"\"\r\n    }\r\n\r\n    input.addEventListener(\"input\", mask, false);\r\n    input.addEventListener(\"focus\", mask, false);\r\n    input.addEventListener(\"blur\", mask, false);\r\n    input.addEventListener(\"keydown\", mask, false)\r\n\r\n  });\r\n\r\n  // Tabby\r\n  var tabs = new Tabby('[data-tabs]');\r\n});\n\n//# sourceURL=webpack://gulp-2022/./dist/js/app.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./dist/js/app.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;